#!/usr/bin/python3
# -*- coding: utf-8 -*-

# hosted @eH

"""
This is a simple script for changing filenames and extensions.

Use ' rnf <path>/<filename> %"<search>" %"<replace>" ' or
' rnf <path>/<filename> ' -> input will be prompt

Use ' rnf <path>/<filename> %"[<index>:<index>]" %"<replace>" '
or leave command line empty and get input-prompt

Available commands:
  -t: Test the changend filename
  -v: verbose action
  -e: change extenison instead
  -d: change delimiter
  -r: will overwrite an existing file with same name
  -n: write new file with new filename
"""

import os
import sys
import readline
from shutil import copyfile as cp


# -- global variables --
argsc = sys.argv[1:]	# get command-line-arguments
cwdir = os.getcwd()		# get the current working directory


# -- get files from command-line-arguments --
def cli_args_file():
	lst_files = []
	for f in argsc:
		if os.path.isfile(f) == True:
			lst_files.append(f)
	if len(lst_files) > 0:
		return lst_files
	else: return 0

# -- check if files exist and return them --
def getfiles():
	if cli_args_file() == 0:
		sys.exit("File(s) not found - non selected!!!")
	else:
		selected_files = cli_args_file()
		return selected_files

# -- get search/replace-characters from command-line-arguments
def search_replace_cli_chars():
	# define cli-string: " '
	# eg. %"<search>" %"<replace>" or %'<search>' %'<replace>'
	# % = activate search/replace for cli-args
	lst_chars = []
	i = 0
	for c in argsc:
		if c[0] == "%":
			lst_chars.append(argsc[i][1:])
		i += 1
	return lst_chars

# -- parse command arguments from command line --
def argparser():
	# '-' will be used to define a command und cli
	# args that follow '-' will be parsed if > 1
	# the function will return a list of all commands
	lst_argsc = []
	i = 0
	for c in argsc:
		if c[0] == "-":
			if len(argsc[i]) > 2:
				for e in argsc[i][1:]:
					lst_argsc.append("-"+e)
			else:
				lst_argsc.append(argsc[i])
		i += 1
	return lst_argsc

# -- checking syntax of search/replace and return characters --
def sr_crits():
	lst_crits = search_replace_cli_chars()
	# check if lst_crits contains characters (search:1 replace:2)
	if len(lst_crits) == 2:
		return lst_crits
	if len(lst_crits) > 0 and len(lst_crits) < 2:
		sys.exit("Missing arguments!!!")
	if len(lst_crits) > 2:
		sys.exit("Too many arguments!!!")
	# if non-cli-args where given prompt input ...
	if len(lst_crits) == 0:
		search_inp = str(input("Search: "))
		replace_inp = str(input("Replace: "))
		lst_sr = [search_inp, replace_inp]
		return lst_sr

# -- extracting filename, file-extenison and path from file --
def get_filename(argsf):
	lst_filename = (argsf.split("/")[-1]).split(".")
	FiName = lst_filename[0]
	try:
		lst_extension = []  # handle more than one extenison
		for e in lst_filename[1:]:
			lst_extension.append("."+e)
		FiExt = "".join(lst_extension)
	except IndexError:  # -> if no extenison exists
		FiExt = ""
	FiPath = "/".join(argsf.split("/")[:-1][1:])
	return FiName, FiExt, FiPath

# -- declare delimiter (default: ';' ) --
def getdmr():
	dmr = ";"
	if "-d" in argsc:
		try:
			dmr = argsc[argsc.index("-d")+1]
		except IndexError:
			sys.exit("SyntaxError for delimiter -> ( -d '<exp>')")
	return dmr

# -- allow simple string manipulation by indexing characters of filename(string) --
def manipstr(manipex, strfn):
	explst = (manipex[1:][:-1]).split(":")
	# force an empty list element to become '0' at the begin or length-of-string at the end
	try:
		if explst[0] == "":
			explst[0] = '0'
		if explst[1] == "":
			explst[1] = str(len(strfn))
		# create search-string
		search_mpr = strfn[int(explst[0]):int(explst[1])]
	except (IndexError, ValueError):
		sys.exit("SyntaxError for expression (exp. must be numeric)!!!\n"
		" -> write like ... [<exp>:<exp>], [:<exp>], [<exp>:] "
		)
	return search_mpr


# -- 'main'-function -> changing the actual filename --
def change_names():
	global argcl  # -> global the argparser-variable
	argcl = argparser()
	lst_files = getfiles()
	lst_sr = sr_crits()
	search = lst_sr[0]
	replace = lst_sr[1]
	# loop over all selected files to change name or extenison
	for f in lst_files:
		argfn = get_filename(f)
		#--------------------------------------------------------
		def _change_extension():
			if argfn[1] != "":  # -> check, if extenison exists
				change_ext = argfn[1].replace(search, replace)
				if argfn[2] == "":
					new_name = argfn[0] + change_ext
				else:
					new_name = "/" + argfn[2] + "/" + argfn[0] + change_ext
			else:
				new_name = n
			return new_name
		#--------------------------------------------------------
		def _change_filename():
			_search=search
			# if matching brackets exist run manipstr-function
			if search[:1] == "[" and search[-1:] == "]":
				_search = manipstr(search,argfn[0])
			# split arguments at the delimiter and change filename
			search_lst = _search.split(str(getdmr()))
			replace_lst = replace.split(str(getdmr()))
			if len(search_lst) == len(replace_lst):
				change_name = argfn[0]
				i = 0
				for a in search_lst:
					change_name = change_name.replace(search_lst[i], replace_lst[i])
					i += 1
				if argfn[2] == "":
					new_name = change_name + argfn[1]
				else:
					new_name = "/" + argfn[2] + "/" + change_name + argfn[1]
			else:
				sys.exit("Missing arguments of 'search' or 'replace'!!!")
			return new_name
		#--------------------------------------------------------
		if "-e" in argcl:
			rnFile = _change_extension()
		else:
			rnFile = _change_filename()
		if "-t" in argcl:
			rename_check(rnFile)
		else:
			rename_files(f, rnFile)

# -- testing rename --
def rename_check(t_new_name):
	" show how the renamed file would look like "
	print(t_new_name.split("/")[-1])

# -- handle existing files --
def rename_exists(_new_name):
	"""
	if file exists, warn and do not overwrite existing file
	'-r' will overwrite an existing file with same filename
	"""
	# get all files inside same directory
	lst_path = _new_name.split("/")[1:][:-1]
	_path = "/".join(lst_path)
	if _path == "":
		_path = cwdir
	else:
		_path = "/" + _path
	# list all files inside directory
	lst_fdir = os.listdir(_path)
	lst_files = []
	for f in lst_fdir:
		lst_files.append(f.split("/")[-1])
	# check, if renamed file already exists
	if (_new_name.split("/")[-1]) in lst_files:
		return 1
	else:
		return 0

# -- renaming selected files --
def rename_files(n,new_name):
	if n != new_name:
		if rename_exists(new_name) == 1 and "-r" not in argcl:
			print("File '" + new_name + "' already exists!!!\n"
        	      "Use '-r' to overwrite existing file.")
		else:
			if "-n" in argcl:
				cp(n, new_name)
			else:  # -> default
				os.rename(n, new_name)
			" v => verbose "
			if "-v" in argcl:
				if n != new_name:
					print("'" + n + "' -> '" + new_name + "'")


# make sure script is only run directly
if __name__ == "__main__":
	change_names()



